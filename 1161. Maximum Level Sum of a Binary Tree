/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 
 
 // here we do the level order traversal and iterate throught the entire level and find the level which has a maximum sum
 
class Solution {
private:
    int get_sum(vector<int> arr){
        int sum =0;
        for(auto it: arr){
            sum+=it;
        }
        return sum;
    }
public:
    int maxLevelSum(TreeNode* root) {
        map<int, int> mpp;
        queue<TreeNode* > q;
        q.push(root);
        int i=1;
        while(!q.empty()){
            int size = q.size();
            vector<int> level;
            for(int i=0;i<size;i++){
                TreeNode* node = q.front();
                q.pop();
                if (node->left != NULL) q.push(node->left);
                if (node->right !=NULL) q.push(node->right);
                level.push_back(node->val);
            }
            mpp[i] = get_sum(level);
            i++;
        }
        int maxi = INT_MIN;
        int ans;
        for(auto it: mpp){
            if(it.second > maxi){
                maxi = it.second;
                ans = it.first;
            }
        }
        return ans;
    }
};

// optimised without use of map;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxLevelSum(TreeNode* root) {
        int sum = INT_MIN;
        int maxi = 1;
        int level = 0;
        queue<TreeNode *> qu;
        qu.push(root);
        while(!qu.empty()){
            int size = qu.size();
            int level_sum = 0;
            level++;
            for(int i=0;i<size;i++){
                TreeNode* node = qu.front();
                qu.pop();
                if(node->left) qu.push(node->left);
                if(node->right) qu.push(node->right);
                level_sum+=node->val;
            }
            if(level_sum > sum){
                sum = level_sum;
                maxi = level; 
            }
        }
        return maxi;
    }
};
