/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    vector<vector<int>> solve(TreeNode* root){
        vector<vector<int>> ans;
        if(root == NULL) return ans;
        queue<TreeNode* > qu;
        qu.push(root);
        while(!qu.empty()){
            int size = qu.size();
            vector<int> level;
            for(int i=0;i<size;i++){
                TreeNode* node = qu.front();
                qu.pop();
                if(node->left != NULL) qu.push(node->left);
                if(node->right != NULL) qu.push(node->right);
                level.push_back(node->val);
            }
            ans.push_back(level);
        }
        return ans;
    }
    vector<vector<int>> reverse_vector(vector<vector<int>>& vec) {
	    vector<vector<int>> ans;
	    int n = vec.size();
	    for (int i = 0; i < n; i++) {
		    ans.push_back(vec[n - i - 1]);
	    }
	    return ans;
    }
    
    
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> ans = solve(root);
        vector<vector<int>> res = reverse_vector(ans);
        return res;
        
    }
};
