class Solution {
    public int searchInsert(int[] nums, int target) {
        int ans =0;
        if(target > nums[nums.length-1]){
            return nums.length;
        }
        if(target < nums[0]){
            return 0;
        }
        if (binary(nums,target)){
            int start = 0;
            int end = nums.length-1;
            while (start<=end){
                int mid = (start+end)/2;
                if(nums[mid] == target){
                    return mid;
                }else if(nums[mid] > target) {
                    end = mid - 1;
                }else {
                    start =mid+1;
                }
            }
        }else {
            int start = 0;
            int end = nums.length-1;
            while(start<=end){
                int mid = (start+end)/2;
                if (target > nums[mid]){
                    ans = mid+1;
                    start = mid+1;
                }else if (target < nums[mid]){
                    ans = mid;
                    end = mid-1;
                }
            }
        }
        return ans;
        

    }
    static boolean binary(int[] nums, int target){
        int start = 0;
        int end = nums.length-1;
        while (start<=end){
            int mid = (start+end)/2;
            if(nums[mid] == target){
                return true;
            }else if(nums[mid] > target) {
                end = mid - 1;
            }else {
                start =mid+1;
            }
        }
        return false;
    }
}
